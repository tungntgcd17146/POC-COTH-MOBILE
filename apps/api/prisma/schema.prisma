// COTH Mobile API - Prisma Schema
// This schema connects to the SAME database as EasyMate (buela-all)
// Based on EasyMate architecture with GraphQL-focused structure

datasource postgres {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_DATABASE_URL")
  extensions = [pg_trgm, vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "metrics", "nativeDistinct", "omitApi", "relationJoins", "prismaSchemaFolder", "postgresqlExtensions", "tracing"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

// Enums
enum EnumUserRole {
  PlatformAdmin
  AccountOwner
  AppAdmin
  AppUser
}

enum EnumUserStatus {
  Active
  Deactivated
  Suspended
  Pending
  Invited
}

enum EnumRegistrationReferralChannel {
  PeerReferral
  LinkedIn
  Facebook
  Youtube
  Twitter
  Forum
  SearchEngine
  VC
  Podcast
  News
  Other
}

// Core Models
model User {
  id                             BigInt                              @id @default(autoincrement())
  uuid                           String                              @default(uuid())
  createdAt                      DateTime?                           @default(now())
  updatedAt                      DateTime?                           @updatedAt
  username                       String
  email                          String                              @unique
  firstName                      String?
  lastName                       String?
  password                       String
  roles                          EnumUserRole[]
  status                         EnumUserStatus?                     @default(Deactivated)
  completedWelcome               Boolean?                            @default(false)
  phone                          String?
  refreshToken                   String?
  lastLoginTime                  DateTime?
  passwordResetRequired          Boolean?                            @default(false)
  deletedAt                      DateTime?
  completedAdditionalInformation Boolean?                            @default(false)
  referralChannels               EnumRegistrationReferralChannel[]
  metadata                       Json?

  // Relations
  company                        Company?                            @relation(fields: [companyId], references: [id])
  companyId                      BigInt?
  address                        Address?                            @relation(fields: [addressId], references: [id])
  addressId                      BigInt?                             @unique
  authProviders                  AuthProvider[]
  userAgentQuotas                UserAgentQuota[]
  quotaUsage                     QuotaUsage[]
  quotaEvents                    QuotaEvent[]
  agentUserConversations         AgentUserConversation[]
  collectionEntries              CollectionEntry[]
  auditLogs                      AuditLog[]

  // Indices
  @@unique([uuid])
  @@index([email(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([firstName(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([lastName(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([roles(ops: ArrayOps)], type: Gin)
  @@index([status])
  @@index([metadata(ops: JsonbOps)], type: Gin)
}

model Company {
  id          BigInt    @id @default(autoincrement())
  uuid        String    @default(uuid())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  name        String
  description String?
  website     String?
  phone       String?
  email       String?
  deletedAt   DateTime?
  metadata    Json?

  // Relations
  users       User[]
  address     Address?  @relation(fields: [addressId], references: [id])
  addressId   BigInt?

  // Indices
  @@unique([uuid])
  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([metadata(ops: JsonbOps)], type: Gin)
}

model Address {
  id         BigInt    @id @default(autoincrement())
  uuid       String    @default(uuid())
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  street1    String?
  street2    String?
  city       String?
  state      String?
  postalCode String?
  deletedAt  DateTime?

  // Relations
  country    Country?  @relation(fields: [countryId], references: [id])
  countryId  BigInt?
  user       User?
  companies  Company[]

  // Indices
  @@unique([uuid])
  @@index([city])
  @@index([state])
  @@index([postalCode])
}

model Country {
  id        BigInt    @id @default(autoincrement())
  uuid      String    @default(uuid())
  code      String    @unique
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Relations
  addresses Address[]

  // Indices
  @@unique([uuid])
  @@index([code])
}

model AuthProvider {
  id           BigInt    @id @default(autoincrement())
  uuid         String    @default(uuid())
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt
  userId       BigInt
  provider     String
  providerId   String
  providerData Json?

  // Relations
  user         User      @relation(fields: [userId], references: [id])

  // Indices
  @@unique([uuid])
  @@unique([userId, provider])
  @@index([provider])
  @@index([providerId])
}

model Role {
  id          BigInt    @id @default(autoincrement())
  uuid        String    @default(uuid())
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  name        String    @unique
  description String?
  permissions Json?
  deletedAt   DateTime?

  // Indices
  @@unique([uuid])
  @@index([name])
  @@index([permissions(ops: JsonbOps)], type: Gin)
}

model UserAgentQuota {
  id                BigInt          @id @default(autoincrement())
  uuid              String          @default(uuid())
  createdAt         DateTime?       @default(now())
  updatedAt         DateTime?       @updatedAt
  userId            BigInt
  quotaDefinitionId BigInt
  currentUsage      Int             @default(0)
  limit             Int
  resetDate         DateTime?
  isUnlimited       Boolean         @default(false)

  // Relations
  user              User            @relation(fields: [userId], references: [id])
  quotaDefinition   QuotaDefinition @relation(fields: [quotaDefinitionId], references: [id])

  // Indices
  @@unique([uuid])
  @@index([userId])
  @@index([quotaDefinitionId])
}

model QuotaDefinition {
  id              BigInt           @id @default(autoincrement())
  uuid            String           @default(uuid())
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @updatedAt
  name            String           @unique
  description     String?
  defaultLimit    Int
  resetPeriod     String?

  // Relations
  userAgentQuotas UserAgentQuota[]
  quotaEvents     QuotaEvent[]

  // Indices
  @@unique([uuid])
  @@index([name])
}

model QuotaUsage {
  id        BigInt    @id @default(autoincrement())
  uuid      String    @default(uuid())
  createdAt DateTime? @default(now())
  userId    BigInt
  usage     Int
  metadata  Json?

  // Relations
  user      User      @relation(fields: [userId], references: [id])

  // Indices
  @@unique([uuid])
  @@index([userId])
  @@index([createdAt])
}

model QuotaEvent {
  id                BigInt          @id @default(autoincrement())
  uuid              String          @default(uuid())
  createdAt         DateTime?       @default(now())
  userId            BigInt
  quotaDefinitionId BigInt
  eventType         String
  amount            Int
  metadata          Json?

  // Relations
  user              User            @relation(fields: [userId], references: [id])
  quotaDefinition   QuotaDefinition @relation(fields: [quotaDefinitionId], references: [id])

  // Indices
  @@unique([uuid])
  @@index([userId])
  @@index([quotaDefinitionId])
  @@index([eventType])
  @@index([createdAt])
}

model Agent {
  id                     BigInt                  @id @default(autoincrement())
  uuid                   String                  @default(uuid())
  createdAt              DateTime?               @default(now())
  updatedAt              DateTime?               @updatedAt
  name                   String
  description            String?
  configuration          Json?
  isActive               Boolean                 @default(true)
  deletedAt              DateTime?

  // Relations
  agentUserConversations AgentUserConversation[]

  // Indices
  @@unique([uuid])
  @@index([name])
  @@index([isActive])
}

model AgentUserConversation {
  id                BigInt             @id @default(autoincrement())
  uuid              String             @default(uuid())
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt
  userId            BigInt
  agentId           BigInt
  title             String?
  metadata          Json?
  deletedAt         DateTime?

  // Relations
  user              User               @relation(fields: [userId], references: [id])
  agent             Agent              @relation(fields: [agentId], references: [id])
  agentUserMessages AgentUserMessage[]

  // Indices
  @@unique([uuid])
  @@index([userId])
  @@index([agentId])
  @@index([createdAt])
}

model AgentUserMessage {
  id             BigInt                @id @default(autoincrement())
  uuid           String                @default(uuid())
  createdAt      DateTime?             @default(now())
  conversationId BigInt
  content        String
  role           String
  metadata       Json?

  // Relations
  conversation   AgentUserConversation @relation(fields: [conversationId], references: [id])

  // Indices
  @@unique([uuid])
  @@index([conversationId])
  @@index([role])
  @@index([createdAt])
}

model CollectionDefinition {
  id                BigInt            @id @default(autoincrement())
  uuid              String            @default(uuid())
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
  name              String
  slug              String?           @unique
  description       String?
  isSystem          Boolean           @default(false)
  deletedAt         DateTime?

  // Relations
  collectionEntries CollectionEntry[]

  // Indices
  @@unique([uuid])
  @@index([name])
  @@index([slug])
}

model CollectionEntry {
  id                     BigInt               @id @default(autoincrement())
  uuid                   String               @default(uuid())
  createdAt              DateTime?            @default(now())
  updatedAt              DateTime?            @updatedAt
  userId                 BigInt
  collectionDefinitionId BigInt
  data                   Json?
  deletedAt              DateTime?

  // Relations
  user                   User                 @relation(fields: [userId], references: [id])
  collectionDefinition   CollectionDefinition @relation(fields: [collectionDefinitionId], references: [id])

  // Indices
  @@unique([uuid])
  @@index([userId])
  @@index([collectionDefinitionId])
  @@index([createdAt])
  @@index([data(ops: JsonbOps)], type: Gin)
}

model AuditLog {
  id         BigInt    @id @default(autoincrement())
  uuid       String    @default(uuid())
  createdAt  DateTime? @default(now())
  userId     BigInt
  action     String
  resource   String
  resourceId String?
  changes    Json?
  metadata   Json?

  // Relations
  user       User      @relation(fields: [userId], references: [id])

  // Indices
  @@unique([uuid])
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([resourceId])
  @@index([createdAt])
  @@index([metadata(ops: JsonbOps)], type: Gin)
}
